//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class ElementComponentsLookup
{
	public const int CanBeDead = 0;
	public const int CanRespawnAfterDeath = 1;
	public const int DeadAddedListener = 2;
	public const int Dead = 3;
	public const int DeadRemovedListener = 4;
	public const int DebugMessage = 5;
	public const int EnterStateAddedListener = 6;
	public const int EnterState = 7;
	public const int Ghost = 8;
	public const int IComponentRef = 9;
	public const int ItemEater = 10;
	public const int LeaveStateAddedListener = 11;
	public const int LeaveState = 12;
	public const int MovementInputAction = 13;
	public const int MoveOnTileAddedListener = 14;
	public const int MoveOnTileBeginAddedListener = 15;
	public const int MoveOnTileBegin = 16;
	public const int MoveOnTile = 17;
	public const int MoveOnTileEndAddedListener = 18;
	public const int MoveOnTileEnd = 19;
	public const int OnTileElement = 20;
	public const int OnTileElementKiller = 21;
	public const int OnTilePositionAddedListener = 22;
	public const int OnTilePosition = 23;
	public const int Player = 24;
	public const int SpeedChangeable = 25;
	public const int StateHolder = 26;
	public const int TeamAddedListener = 27;
	public const int Team = 28;
	public const int TileCollapser = 29;
	public const int TileOwner = 30;

	public const int TotalComponents = 31;

	public static readonly string[] ComponentNames =
	{
		"CanBeDead",
		"CanRespawnAfterDeath",
		"DeadAddedListener",
		"Dead",
		"DeadRemovedListener",
		"DebugMessage",
		"EnterStateAddedListener",
		"EnterState",
		"Ghost",
		"IComponentRef",
		"ItemEater",
		"LeaveStateAddedListener",
		"LeaveState",
		"MovementInputAction",
		"MoveOnTileAddedListener",
		"MoveOnTileBeginAddedListener",
		"MoveOnTileBegin",
		"MoveOnTile",
		"MoveOnTileEndAddedListener",
		"MoveOnTileEnd",
		"OnTileElement",
		"OnTileElementKiller",
		"OnTilePositionAddedListener",
		"OnTilePosition",
		"Player",
		"SpeedChangeable",
		"StateHolder",
		"TeamAddedListener",
		"Team",
		"TileCollapser",
		"TileOwner"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(CanBeDeadComponent),
		typeof(CanRespawnAfterDeathComponent),
		typeof(DeadAddedListenerComponent),
		typeof(DeadComponent),
		typeof(DeadRemovedListenerComponent),
		typeof(DebugMessageComponent),
		typeof(EnterStateAddedListenerComponent),
		typeof(EnterStateComponent),
		typeof(GhostComponent),
		typeof(IComponentRefComponent),
		typeof(ItemEaterComponent),
		typeof(LeaveStateAddedListenerComponent),
		typeof(LeaveStateComponent),
		typeof(MovementInputActionComponent),
		typeof(MoveOnTileAddedListenerComponent),
		typeof(MoveOnTileBeginAddedListenerComponent),
		typeof(MoveOnTileBeginComponent),
		typeof(MoveOnTileComponent),
		typeof(MoveOnTileEndAddedListenerComponent),
		typeof(MoveOnTileEndComponent),
		typeof(OnTileElementComponent),
		typeof(OnTileElementKillerComponent),
		typeof(OnTilePositionAddedListenerComponent),
		typeof(OnTilePositionComponent),
		typeof(PlayerComponent),
		typeof(SpeedChangeableComponent),
		typeof(StateHolderComponent),
		typeof(TeamAddedListenerComponent),
		typeof(TeamComponent),
		typeof(TileCollapserComponent),
		typeof(TileOwnerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(CanBeDeadComponent), 0 },
		{ typeof(CanRespawnAfterDeathComponent), 1 },
		{ typeof(DeadAddedListenerComponent), 2 },
		{ typeof(DeadComponent), 3 },
		{ typeof(DeadRemovedListenerComponent), 4 },
		{ typeof(DebugMessageComponent), 5 },
		{ typeof(EnterStateAddedListenerComponent), 6 },
		{ typeof(EnterStateComponent), 7 },
		{ typeof(GhostComponent), 8 },
		{ typeof(IComponentRefComponent), 9 },
		{ typeof(ItemEaterComponent), 10 },
		{ typeof(LeaveStateAddedListenerComponent), 11 },
		{ typeof(LeaveStateComponent), 12 },
		{ typeof(MovementInputActionComponent), 13 },
		{ typeof(MoveOnTileAddedListenerComponent), 14 },
		{ typeof(MoveOnTileBeginAddedListenerComponent), 15 },
		{ typeof(MoveOnTileBeginComponent), 16 },
		{ typeof(MoveOnTileComponent), 17 },
		{ typeof(MoveOnTileEndAddedListenerComponent), 18 },
		{ typeof(MoveOnTileEndComponent), 19 },
		{ typeof(OnTileElementComponent), 20 },
		{ typeof(OnTileElementKillerComponent), 21 },
		{ typeof(OnTilePositionAddedListenerComponent), 22 },
		{ typeof(OnTilePositionComponent), 23 },
		{ typeof(PlayerComponent), 24 },
		{ typeof(SpeedChangeableComponent), 25 },
		{ typeof(StateHolderComponent), 26 },
		{ typeof(TeamAddedListenerComponent), 27 },
		{ typeof(TeamComponent), 28 },
		{ typeof(TileCollapserComponent), 29 },
		{ typeof(TileOwnerComponent), 30 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
