//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ElementEntity
{
	public MoveOnTileBeginAddedListenerComponent MoveOnTileBeginAddedListener { get { return (MoveOnTileBeginAddedListenerComponent)GetComponent(ElementComponentsLookup.MoveOnTileBeginAddedListener); } }
	public bool HasMoveOnTileBeginAddedListener { get { return HasComponent(ElementComponentsLookup.MoveOnTileBeginAddedListener); } }

	public void AddMoveOnTileBeginAddedListener(System.Collections.Generic.List<IMoveOnTileBeginAddedListener> newValue)
	{
		var index = ElementComponentsLookup.MoveOnTileBeginAddedListener;
		var component = (MoveOnTileBeginAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileBeginAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceMoveOnTileBeginAddedListener(System.Collections.Generic.List<IMoveOnTileBeginAddedListener> newValue)
	{
		var index = ElementComponentsLookup.MoveOnTileBeginAddedListener;
		var component = (MoveOnTileBeginAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileBeginAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyMoveOnTileBeginAddedListenerTo(MoveOnTileBeginAddedListenerComponent copyComponent)
	{
		var index = ElementComponentsLookup.MoveOnTileBeginAddedListener;
		var component = (MoveOnTileBeginAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileBeginAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveMoveOnTileBeginAddedListener()
	{
		RemoveComponent(ElementComponentsLookup.MoveOnTileBeginAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ElementMatcher
{
	static JCMG.EntitasRedux.IMatcher<ElementEntity> _matcherMoveOnTileBeginAddedListener;

	public static JCMG.EntitasRedux.IMatcher<ElementEntity> MoveOnTileBeginAddedListener
	{
		get
		{
			if (_matcherMoveOnTileBeginAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<ElementEntity>)JCMG.EntitasRedux.Matcher<ElementEntity>.AllOf(ElementComponentsLookup.MoveOnTileBeginAddedListener);
				matcher.ComponentNames = ElementComponentsLookup.ComponentNames;
				_matcherMoveOnTileBeginAddedListener = matcher;
			}

			return _matcherMoveOnTileBeginAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ElementEntity
{
	public void AddMoveOnTileBeginAddedListener(IMoveOnTileBeginAddedListener value)
	{
		var listeners = HasMoveOnTileBeginAddedListener
			? MoveOnTileBeginAddedListener.value
			: new System.Collections.Generic.List<IMoveOnTileBeginAddedListener>();
		listeners.Add(value);
		ReplaceMoveOnTileBeginAddedListener(listeners);
	}

	public void RemoveMoveOnTileBeginAddedListener(IMoveOnTileBeginAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = MoveOnTileBeginAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveMoveOnTileBeginAddedListener();
		}
		else
		{
			ReplaceMoveOnTileBeginAddedListener(listeners);
		}
	}
}
