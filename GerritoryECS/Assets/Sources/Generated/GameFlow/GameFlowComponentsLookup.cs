//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameFlowComponentsLookup
{
	public const int CountdownTimer = 0;
	public const int EndOnEliminated = 1;
	public const int EndOnGoalReached = 2;
	public const int EndOnTimeout = 3;
	public const int GameFlow = 4;
	public const int GameOver = 5;
	public const int InGameState = 6;
	public const int ScoreObjective = 7;
	public const int SurvivalObjective = 8;

	public const int TotalComponents = 9;

	public static readonly string[] ComponentNames =
	{
		"CountdownTimer",
		"EndOnEliminated",
		"EndOnGoalReached",
		"EndOnTimeout",
		"GameFlow",
		"GameOver",
		"InGameState",
		"ScoreObjective",
		"SurvivalObjective"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(CountdownTimerComponent),
		typeof(EndOnEliminatedComponent),
		typeof(EndOnGoalReachedComponent),
		typeof(EndOnTimeoutComponent),
		typeof(GameFlowComponent),
		typeof(GameOverComponent),
		typeof(InGameStateComponent),
		typeof(ScoreObjectiveComponent),
		typeof(SurvivalObjectiveComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(CountdownTimerComponent), 0 },
		{ typeof(EndOnEliminatedComponent), 1 },
		{ typeof(EndOnGoalReachedComponent), 2 },
		{ typeof(EndOnTimeoutComponent), 3 },
		{ typeof(GameFlowComponent), 4 },
		{ typeof(GameOverComponent), 5 },
		{ typeof(InGameStateComponent), 6 },
		{ typeof(ScoreObjectiveComponent), 7 },
		{ typeof(SurvivalObjectiveComponent), 8 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
