//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts : JCMG.EntitasRedux.IContexts
{
	#if UNITY_EDITOR && !ENTITAS_REDUX_NO_SHARED_CONTEXT

	static Contexts()
	{
		UnityEditor.EditorApplication.playModeStateChanged += OnPlayModeStateChanged;
	}

	/// <summary>
	/// Invoked when the Unity Editor has a <see cref="UnityEditor.PlayModeStateChange"/> change.
	/// </summary>
	private static void OnPlayModeStateChanged(UnityEditor.PlayModeStateChange playModeStateChange)
	{
		// When entering edit-mode, reset all static state so that it does not interfere with the
		// next play-mode session.
		if (playModeStateChange == UnityEditor.PlayModeStateChange.EnteredEditMode)
		{
			_sharedInstance = null;
		}
	}

	#endif

	#if !ENTITAS_REDUX_NO_SHARED_CONTEXT
	/// <summary>
	/// A globally-accessible singleton instance of <see cref="Contexts"/>. Instantiated
	/// the first time its <see langword="get"/> property is used.
	/// </summary>
	/// <remarks>
	/// If your project forbids global singletons like this one, add a <c>#define</c> named <c>ENTITAS_REDUX_NO_SHARED_CONTEXT</c>
	/// to its build settings. Doing so will remove this property to prevent accidental use.
	/// </remarks>
	public static Contexts SharedInstance
	{
		get
		{
			if (_sharedInstance == null)
			{
				_sharedInstance = new Contexts();
			}

			return _sharedInstance;
		}
		set	{ _sharedInstance = value; }
	}

	static Contexts _sharedInstance;
	#endif

	public CommandContext Command { get; set; }
	public ConfigContext Config { get; set; }
	public EffectContext Effect { get; set; }
	public ElementContext Element { get; set; }
	public GameFlowContext GameFlow { get; set; }
	public InputContext Input { get; set; }
	public ItemContext Item { get; set; }
	public LevelContext Level { get; set; }
	public MessageContext Message { get; set; }
	public PlayerStateContext PlayerState { get; set; }
	public TileContext Tile { get; set; }

	public JCMG.EntitasRedux.IContext[] AllContexts { get { return new JCMG.EntitasRedux.IContext [] { Command, Config, Effect, Element, GameFlow, Input, Item, Level, Message, PlayerState, Tile }; } }

	public Contexts()
	{
		Command = new CommandContext();
		Config = new ConfigContext();
		Effect = new EffectContext();
		Element = new ElementContext();
		GameFlow = new GameFlowContext();
		Input = new InputContext();
		Item = new ItemContext();
		Level = new LevelContext();
		Message = new MessageContext();
		PlayerState = new PlayerStateContext();
		Tile = new TileContext();

		var postConstructors = System.Linq.Enumerable.Where(
			GetType().GetMethods(),
			method => System.Attribute.IsDefined(method, typeof(JCMG.EntitasRedux.PostConstructorAttribute))
		);

		foreach (var postConstructor in postConstructors)
		{
			postConstructor.Invoke(this, null);
		}
	}

	public void Reset()
	{
		var contexts = AllContexts;
		for (int i = 0; i < contexts.Length; i++)
		{
			contexts[i].Reset();
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts
{
	public const string AIInput = "AIInput";
	public const string CanBeRespawnedOn = "CanBeRespawnedOn";
	public const string Eaten = "Eaten";
	public const string GlobalItemSpawner = "GlobalItemSpawner";
	public const string ItemEater = "ItemEater";
	public const string MarkOnTileElementDead = "MarkOnTileElementDead";
	public const string MoveOnTile = "MoveOnTile";
	public const string OnTileElement = "OnTileElement";
	public const string OnTileElementEffect = "OnTileElementEffect";
	public const string OnTileElementEnterTile = "OnTileElementEnterTile";
	public const string OnTileElementLeaveTile = "OnTileElementLeaveTile";
	public const string OnTileItem = "OnTileItem";
	public const string OnTilePosition = "OnTilePosition";
	public const string Owner = "Owner";
	public const string Player = "Player";
	public const string SpawnedByGlobalSpawner = "SpawnedByGlobalSpawner";
	public const string SpawnItem = "SpawnItem";
	public const string State = "State";
	public const string StateHolder = "StateHolder";
	public const string Team = "Team";
	public const string TeamInfo = "TeamInfo";
	public const string TilePosition = "TilePosition";
	public const string UserInputUserId = "UserInputUserId";
	public const string UserInputTargetPlayerId = "UserInputTargetPlayerId";

	[JCMG.EntitasRedux.PostConstructor]
	public void InitializeEntityIndices()
	{
		Input.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<InputEntity, int>(
			AIInput,
			Input.GetGroup(InputMatcher.AIInput),
			(e, c) => ((AIInputComponent)c).TargetPlayerId));

		Tile.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<TileEntity, int>(
			CanBeRespawnedOn,
			Tile.GetGroup(TileMatcher.CanBeRespawnedOn),
			(e, c) => ((CanBeRespawnedOnComponent)c).RespawnAreaId));

		Item.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<ItemEntity, int>(
			Eaten,
			Item.GetGroup(ItemMatcher.Eaten),
			(e, c) => ((EatenComponent)c).EaterId));

		Item.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ItemEntity, int>(
			GlobalItemSpawner,
			Item.GetGroup(ItemMatcher.GlobalItemSpawner),
			(e, c) => ((GlobalItemSpawnerComponent)c).Id));

		Element.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>(
			ItemEater,
			Element.GetGroup(ElementMatcher.ItemEater),
			(e, c) => ((ItemEaterComponent)c).Id));

		Command.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<CommandEntity, int>(
			MarkOnTileElementDead,
			Command.GetGroup(CommandMatcher.MarkOnTileElementDead),
			(e, c) => ((MarkOnTileElementDeadComponent)c).TargetOnTileElementId));

		Element.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<ElementEntity, UnityEngine.Vector2Int>(
			MoveOnTile,
			Element.GetGroup(ElementMatcher.MoveOnTile),
			(e, c) => ((MoveOnTileComponent)c).ToPosition));

		Element.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>(
			OnTileElement,
			Element.GetGroup(ElementMatcher.OnTileElement),
			(e, c) => ((OnTileElementComponent)c).Id));

		Effect.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<EffectEntity, int>(
			OnTileElementEffect,
			Effect.GetGroup(EffectMatcher.OnTileElementEffect),
			(e, c) => ((OnTileElementEffectComponent)c).OnTileElementId));

		Message.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<MessageEntity, int>(
			OnTileElementEnterTile,
			Message.GetGroup(MessageMatcher.OnTileElementEnterTile),
			(e, c) => ((OnTileElementEnterTileComponent)c).OnTileElementId));

		Message.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<MessageEntity, int>(
			OnTileElementLeaveTile,
			Message.GetGroup(MessageMatcher.OnTileElementLeaveTile),
			(e, c) => ((OnTileElementLeaveTileComponent)c).OnTileElementId));

		Item.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ItemEntity, UnityEngine.Vector2Int>(
			OnTileItem,
			Item.GetGroup(ItemMatcher.OnTileItem),
			(e, c) => ((OnTileItemComponent)c).Position));

		Element.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<ElementEntity, UnityEngine.Vector2Int>(
			OnTilePosition,
			Element.GetGroup(ElementMatcher.OnTilePosition),
			(e, c) => ((OnTilePositionComponent)c).Value));

		Tile.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<TileEntity, int>(
			Owner,
			Tile.GetGroup(TileMatcher.Owner),
			(e, c) => ((OwnerComponent)c).OwnerTeamId));

		Element.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>(
			Player,
			Element.GetGroup(ElementMatcher.Player),
			(e, c) => ((PlayerComponent)c).Id));

		Item.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<ItemEntity, int>(
			SpawnedByGlobalSpawner,
			Item.GetGroup(ItemMatcher.SpawnedByGlobalSpawner),
			(e, c) => ((SpawnedByGlobalSpawnerComponent)c).SpawnerId));
		Command.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<CommandEntity, int>(
			SpawnedByGlobalSpawner,
			Command.GetGroup(CommandMatcher.SpawnedByGlobalSpawner),
			(e, c) => ((SpawnedByGlobalSpawnerComponent)c).SpawnerId));

		Command.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<CommandEntity, UnityEngine.Vector2Int>(
			SpawnItem,
			Command.GetGroup(CommandMatcher.SpawnItem),
			(e, c) => ((SpawnItemComponent)c).TilePosition));

		PlayerState.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<PlayerStateEntity, int>(
			State,
			PlayerState.GetGroup(PlayerStateMatcher.State),
			(e, c) => ((StateComponent)c).HolderId));

		Element.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>(
			StateHolder,
			Element.GetGroup(ElementMatcher.StateHolder),
			(e, c) => ((StateHolderComponent)c).Id));

		Element.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<ElementEntity, int>(
			Team,
			Element.GetGroup(ElementMatcher.Team),
			(e, c) => ((TeamComponent)c).Id));

		Level.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<LevelEntity, int>(
			TeamInfo,
			Level.GetGroup(LevelMatcher.TeamInfo),
			(e, c) => ((TeamInfoComponent)c).Id));

		Tile.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<TileEntity, UnityEngine.Vector2Int>(
			TilePosition,
			Tile.GetGroup(TileMatcher.TilePosition),
			(e, c) => ((TilePositionComponent)c).Value));

		Input.AddEntityIndex(new JCMG.EntitasRedux.EntityIndex<InputEntity, int>(
			UserInputUserId,
			Input.GetGroup(InputMatcher.UserInput),
			(e, c) => ((UserInputComponent)c).UserId));

		Input.AddEntityIndex(new JCMG.EntitasRedux.PrimaryEntityIndex<InputEntity, int>(
			UserInputTargetPlayerId,
			Input.GetGroup(InputMatcher.UserInput),
			(e, c) => ((UserInputComponent)c).TargetPlayerId));
	}
}

public static class ContextsExtensions
{
	public static InputEntity GetEntityWithAIInput(this InputContext context, int TargetPlayerId)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<InputEntity, int>)context.GetEntityIndex(Contexts.AIInput)).GetEntity(TargetPlayerId);
	}

	public static System.Collections.Generic.HashSet<TileEntity> GetEntitiesWithCanBeRespawnedOn(this TileContext context, int RespawnAreaId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<TileEntity, int>)context.GetEntityIndex(Contexts.CanBeRespawnedOn)).GetEntities(RespawnAreaId);
	}

	public static System.Collections.Generic.HashSet<ItemEntity> GetEntitiesWithEaten(this ItemContext context, int EaterId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<ItemEntity, int>)context.GetEntityIndex(Contexts.Eaten)).GetEntities(EaterId);
	}

	public static ItemEntity GetEntityWithGlobalItemSpawner(this ItemContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ItemEntity, int>)context.GetEntityIndex(Contexts.GlobalItemSpawner)).GetEntity(Id);
	}

	public static ElementEntity GetEntityWithItemEater(this ElementContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>)context.GetEntityIndex(Contexts.ItemEater)).GetEntity(Id);
	}

	public static System.Collections.Generic.HashSet<CommandEntity> GetEntitiesWithMarkOnTileElementDead(this CommandContext context, int TargetOnTileElementId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<CommandEntity, int>)context.GetEntityIndex(Contexts.MarkOnTileElementDead)).GetEntities(TargetOnTileElementId);
	}

	public static System.Collections.Generic.HashSet<ElementEntity> GetEntitiesWithMoveOnTile(this ElementContext context, UnityEngine.Vector2Int ToPosition)
	{
		return ((JCMG.EntitasRedux.EntityIndex<ElementEntity, UnityEngine.Vector2Int>)context.GetEntityIndex(Contexts.MoveOnTile)).GetEntities(ToPosition);
	}

	public static ElementEntity GetEntityWithOnTileElement(this ElementContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>)context.GetEntityIndex(Contexts.OnTileElement)).GetEntity(Id);
	}

	public static System.Collections.Generic.HashSet<EffectEntity> GetEntitiesWithOnTileElementEffect(this EffectContext context, int OnTileElementId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<EffectEntity, int>)context.GetEntityIndex(Contexts.OnTileElementEffect)).GetEntities(OnTileElementId);
	}

	public static MessageEntity GetEntityWithOnTileElementEnterTile(this MessageContext context, int OnTileElementId)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<MessageEntity, int>)context.GetEntityIndex(Contexts.OnTileElementEnterTile)).GetEntity(OnTileElementId);
	}

	public static MessageEntity GetEntityWithOnTileElementLeaveTile(this MessageContext context, int OnTileElementId)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<MessageEntity, int>)context.GetEntityIndex(Contexts.OnTileElementLeaveTile)).GetEntity(OnTileElementId);
	}

	public static ItemEntity GetEntityWithOnTileItem(this ItemContext context, UnityEngine.Vector2Int Position)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ItemEntity, UnityEngine.Vector2Int>)context.GetEntityIndex(Contexts.OnTileItem)).GetEntity(Position);
	}

	public static System.Collections.Generic.HashSet<ElementEntity> GetEntitiesWithOnTilePosition(this ElementContext context, UnityEngine.Vector2Int Value)
	{
		return ((JCMG.EntitasRedux.EntityIndex<ElementEntity, UnityEngine.Vector2Int>)context.GetEntityIndex(Contexts.OnTilePosition)).GetEntities(Value);
	}

	public static System.Collections.Generic.HashSet<TileEntity> GetEntitiesWithOwner(this TileContext context, int OwnerTeamId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<TileEntity, int>)context.GetEntityIndex(Contexts.Owner)).GetEntities(OwnerTeamId);
	}

	public static ElementEntity GetEntityWithPlayer(this ElementContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>)context.GetEntityIndex(Contexts.Player)).GetEntity(Id);
	}

	public static System.Collections.Generic.HashSet<ItemEntity> GetEntitiesWithSpawnedByGlobalSpawner(this ItemContext context, int SpawnerId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<ItemEntity, int>)context.GetEntityIndex(Contexts.SpawnedByGlobalSpawner)).GetEntities(SpawnerId);
	}

	public static System.Collections.Generic.HashSet<CommandEntity> GetEntitiesWithSpawnedByGlobalSpawner(this CommandContext context, int SpawnerId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<CommandEntity, int>)context.GetEntityIndex(Contexts.SpawnedByGlobalSpawner)).GetEntities(SpawnerId);
	}

	public static System.Collections.Generic.HashSet<CommandEntity> GetEntitiesWithSpawnItem(this CommandContext context, UnityEngine.Vector2Int TilePosition)
	{
		return ((JCMG.EntitasRedux.EntityIndex<CommandEntity, UnityEngine.Vector2Int>)context.GetEntityIndex(Contexts.SpawnItem)).GetEntities(TilePosition);
	}

	public static System.Collections.Generic.HashSet<PlayerStateEntity> GetEntitiesWithState(this PlayerStateContext context, int HolderId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<PlayerStateEntity, int>)context.GetEntityIndex(Contexts.State)).GetEntities(HolderId);
	}

	public static ElementEntity GetEntityWithStateHolder(this ElementContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<ElementEntity, int>)context.GetEntityIndex(Contexts.StateHolder)).GetEntity(Id);
	}

	public static System.Collections.Generic.HashSet<ElementEntity> GetEntitiesWithTeam(this ElementContext context, int Id)
	{
		return ((JCMG.EntitasRedux.EntityIndex<ElementEntity, int>)context.GetEntityIndex(Contexts.Team)).GetEntities(Id);
	}

	public static LevelEntity GetEntityWithTeamInfo(this LevelContext context, int Id)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<LevelEntity, int>)context.GetEntityIndex(Contexts.TeamInfo)).GetEntity(Id);
	}

	public static TileEntity GetEntityWithTilePosition(this TileContext context, UnityEngine.Vector2Int Value)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<TileEntity, UnityEngine.Vector2Int>)context.GetEntityIndex(Contexts.TilePosition)).GetEntity(Value);
	}

	public static System.Collections.Generic.HashSet<InputEntity> GetEntitiesWithUserInputUserId(this InputContext context, int UserId)
	{
		return ((JCMG.EntitasRedux.EntityIndex<InputEntity, int>)context.GetEntityIndex(Contexts.UserInputUserId)).GetEntities(UserId);
	}

	public static InputEntity GetEntityWithUserInputTargetPlayerId(this InputContext context, int TargetPlayerId)
	{
		return ((JCMG.EntitasRedux.PrimaryEntityIndex<InputEntity, int>)context.GetEntityIndex(Contexts.UserInputTargetPlayerId)).GetEntity(TargetPlayerId);
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

#if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)

	[JCMG.EntitasRedux.PostConstructor]
	public void InitializeContextObservers() {
		try {
			CreateContextObserver(Command);
			CreateContextObserver(Config);
			CreateContextObserver(Effect);
			CreateContextObserver(Element);
			CreateContextObserver(GameFlow);
			CreateContextObserver(Input);
			CreateContextObserver(Item);
			CreateContextObserver(Level);
			CreateContextObserver(Message);
			CreateContextObserver(PlayerState);
			CreateContextObserver(Tile);
		} catch(System.Exception) {
		}
	}

	public void CreateContextObserver(JCMG.EntitasRedux.IContext context) {
		if (UnityEngine.Application.isPlaying) {
			var observer = new JCMG.EntitasRedux.VisualDebugging.ContextObserver(context);
			UnityEngine.Object.DontDestroyOnLoad(observer.GameObject);
		}
	}

#endif
}
