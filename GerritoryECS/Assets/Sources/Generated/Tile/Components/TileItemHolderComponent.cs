//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TileEntity
{
	static readonly ItemHolderComponent ItemHolderComponent = new ItemHolderComponent();

	public bool IsItemHolder
	{
		get { return HasComponent(TileComponentsLookup.ItemHolder); }
		set
		{
			if (value != IsItemHolder)
			{
				var index = TileComponentsLookup.ItemHolder;
				if (value)
				{
					var componentPool = GetComponentPool(index);
					var component = componentPool.Count > 0
							? componentPool.Pop()
							: ItemHolderComponent;

					AddComponent(index, component);
				}
				else
				{
					RemoveComponent(index);
				}
			}
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TileMatcher
{
	static JCMG.EntitasRedux.IMatcher<TileEntity> _matcherItemHolder;

	public static JCMG.EntitasRedux.IMatcher<TileEntity> ItemHolder
	{
		get
		{
			if (_matcherItemHolder == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<TileEntity>)JCMG.EntitasRedux.Matcher<TileEntity>.AllOf(TileComponentsLookup.ItemHolder);
				matcher.ComponentNames = TileComponentsLookup.ComponentNames;
				_matcherItemHolder = matcher;
			}

			return _matcherItemHolder;
		}
	}
}
