//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class PlayerStateComponentsLookup
{
	public const int DebugMessage = 0;
	public const int SpeedChangeState = 1;
	public const int State = 2;
	public const int StateFactoryTypeIdentifier = 3;
	public const int TimerAddedListener = 4;
	public const int Timer = 5;
	public const int WaitingForRespawnState = 6;

	public const int TotalComponents = 7;

	public static readonly string[] ComponentNames =
	{
		"DebugMessage",
		"SpeedChangeState",
		"State",
		"StateFactoryTypeIdentifier",
		"TimerAddedListener",
		"Timer",
		"WaitingForRespawnState"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(DebugMessageComponent),
		typeof(SpeedChangeStateComponent),
		typeof(StateComponent),
		typeof(StateFactoryTypeIdentifierComponent),
		typeof(TimerAddedListenerComponent),
		typeof(TimerComponent),
		typeof(WaitingForRespawnStateComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(DebugMessageComponent), 0 },
		{ typeof(SpeedChangeStateComponent), 1 },
		{ typeof(StateComponent), 2 },
		{ typeof(StateFactoryTypeIdentifierComponent), 3 },
		{ typeof(TimerAddedListenerComponent), 4 },
		{ typeof(TimerComponent), 5 },
		{ typeof(WaitingForRespawnStateComponent), 6 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
