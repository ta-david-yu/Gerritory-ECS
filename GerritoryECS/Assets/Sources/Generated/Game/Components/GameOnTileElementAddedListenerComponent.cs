//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public OnTileElementAddedListenerComponent OnTileElementAddedListener { get { return (OnTileElementAddedListenerComponent)GetComponent(GameComponentsLookup.OnTileElementAddedListener); } }
	public bool HasOnTileElementAddedListener { get { return HasComponent(GameComponentsLookup.OnTileElementAddedListener); } }

	public void AddOnTileElementAddedListener(System.Collections.Generic.List<IOnTileElementAddedListener> newValue)
	{
		var index = GameComponentsLookup.OnTileElementAddedListener;
		var component = (OnTileElementAddedListenerComponent)CreateComponent(index, typeof(OnTileElementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceOnTileElementAddedListener(System.Collections.Generic.List<IOnTileElementAddedListener> newValue)
	{
		var index = GameComponentsLookup.OnTileElementAddedListener;
		var component = (OnTileElementAddedListenerComponent)CreateComponent(index, typeof(OnTileElementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyOnTileElementAddedListenerTo(OnTileElementAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.OnTileElementAddedListener;
		var component = (OnTileElementAddedListenerComponent)CreateComponent(index, typeof(OnTileElementAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveOnTileElementAddedListener()
	{
		RemoveComponent(GameComponentsLookup.OnTileElementAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherOnTileElementAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> OnTileElementAddedListener
	{
		get
		{
			if (_matcherOnTileElementAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.OnTileElementAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherOnTileElementAddedListener = matcher;
			}

			return _matcherOnTileElementAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddOnTileElementAddedListener(IOnTileElementAddedListener value)
	{
		var listeners = HasOnTileElementAddedListener
			? OnTileElementAddedListener.value
			: new System.Collections.Generic.List<IOnTileElementAddedListener>();
		listeners.Add(value);
		ReplaceOnTileElementAddedListener(listeners);
	}

	public void RemoveOnTileElementAddedListener(IOnTileElementAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = OnTileElementAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveOnTileElementAddedListener();
		}
		else
		{
			ReplaceOnTileElementAddedListener(listeners);
		}
	}
}
