//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public MoveOnTileAddedListenerComponent MoveOnTileAddedListener { get { return (MoveOnTileAddedListenerComponent)GetComponent(GameComponentsLookup.MoveOnTileAddedListener); } }
	public bool HasMoveOnTileAddedListener { get { return HasComponent(GameComponentsLookup.MoveOnTileAddedListener); } }

	public void AddMoveOnTileAddedListener(System.Collections.Generic.List<IMoveOnTileAddedListener> newValue)
	{
		var index = GameComponentsLookup.MoveOnTileAddedListener;
		var component = (MoveOnTileAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceMoveOnTileAddedListener(System.Collections.Generic.List<IMoveOnTileAddedListener> newValue)
	{
		var index = GameComponentsLookup.MoveOnTileAddedListener;
		var component = (MoveOnTileAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyMoveOnTileAddedListenerTo(MoveOnTileAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.MoveOnTileAddedListener;
		var component = (MoveOnTileAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveMoveOnTileAddedListener()
	{
		RemoveComponent(GameComponentsLookup.MoveOnTileAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherMoveOnTileAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> MoveOnTileAddedListener
	{
		get
		{
			if (_matcherMoveOnTileAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.MoveOnTileAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherMoveOnTileAddedListener = matcher;
			}

			return _matcherMoveOnTileAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddMoveOnTileAddedListener(IMoveOnTileAddedListener value)
	{
		var listeners = HasMoveOnTileAddedListener
			? MoveOnTileAddedListener.value
			: new System.Collections.Generic.List<IMoveOnTileAddedListener>();
		listeners.Add(value);
		ReplaceMoveOnTileAddedListener(listeners);
	}

	public void RemoveMoveOnTileAddedListener(IMoveOnTileAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = MoveOnTileAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveMoveOnTileAddedListener();
		}
		else
		{
			ReplaceMoveOnTileAddedListener(listeners);
		}
	}
}
