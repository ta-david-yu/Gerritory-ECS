//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public MoveOnTileStartAddedListenerComponent MoveOnTileStartAddedListener { get { return (MoveOnTileStartAddedListenerComponent)GetComponent(GameComponentsLookup.MoveOnTileStartAddedListener); } }
	public bool HasMoveOnTileStartAddedListener { get { return HasComponent(GameComponentsLookup.MoveOnTileStartAddedListener); } }

	public void AddMoveOnTileStartAddedListener(System.Collections.Generic.List<IMoveOnTileStartAddedListener> newValue)
	{
		var index = GameComponentsLookup.MoveOnTileStartAddedListener;
		var component = (MoveOnTileStartAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileStartAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceMoveOnTileStartAddedListener(System.Collections.Generic.List<IMoveOnTileStartAddedListener> newValue)
	{
		var index = GameComponentsLookup.MoveOnTileStartAddedListener;
		var component = (MoveOnTileStartAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileStartAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyMoveOnTileStartAddedListenerTo(MoveOnTileStartAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.MoveOnTileStartAddedListener;
		var component = (MoveOnTileStartAddedListenerComponent)CreateComponent(index, typeof(MoveOnTileStartAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveMoveOnTileStartAddedListener()
	{
		RemoveComponent(GameComponentsLookup.MoveOnTileStartAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherMoveOnTileStartAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> MoveOnTileStartAddedListener
	{
		get
		{
			if (_matcherMoveOnTileStartAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.MoveOnTileStartAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherMoveOnTileStartAddedListener = matcher;
			}

			return _matcherMoveOnTileStartAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddMoveOnTileStartAddedListener(IMoveOnTileStartAddedListener value)
	{
		var listeners = HasMoveOnTileStartAddedListener
			? MoveOnTileStartAddedListener.value
			: new System.Collections.Generic.List<IMoveOnTileStartAddedListener>();
		listeners.Add(value);
		ReplaceMoveOnTileStartAddedListener(listeners);
	}

	public void RemoveMoveOnTileStartAddedListener(IMoveOnTileStartAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = MoveOnTileStartAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveMoveOnTileStartAddedListener();
		}
		else
		{
			ReplaceMoveOnTileStartAddedListener(listeners);
		}
	}
}
