//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int DebugMessage = 0;
	public const int Level = 1;
	public const int MovementInputAction = 2;
	public const int MoveOnTileAddedListener = 3;
	public const int MoveOnTileCompleteAddedListener = 4;
	public const int MoveOnTileComplete = 5;
	public const int MoveOnTile = 6;
	public const int OnTileElementAddedListener = 7;
	public const int OnTileElement = 8;
	public const int Player = 9;
	public const int TilePosition = 10;

	public const int TotalComponents = 11;

	public static readonly string[] ComponentNames =
	{
		"DebugMessage",
		"Level",
		"MovementInputAction",
		"MoveOnTileAddedListener",
		"MoveOnTileCompleteAddedListener",
		"MoveOnTileComplete",
		"MoveOnTile",
		"OnTileElementAddedListener",
		"OnTileElement",
		"Player",
		"TilePosition"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(DebugMessageComponent),
		typeof(LevelComponent),
		typeof(MovementInputActionComponent),
		typeof(MoveOnTileAddedListenerComponent),
		typeof(MoveOnTileCompleteAddedListenerComponent),
		typeof(MoveOnTileCompleteComponent),
		typeof(MoveOnTileComponent),
		typeof(OnTileElementAddedListenerComponent),
		typeof(OnTileElementComponent),
		typeof(PlayerComponent),
		typeof(TilePositionComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(DebugMessageComponent), 0 },
		{ typeof(LevelComponent), 1 },
		{ typeof(MovementInputActionComponent), 2 },
		{ typeof(MoveOnTileAddedListenerComponent), 3 },
		{ typeof(MoveOnTileCompleteAddedListenerComponent), 4 },
		{ typeof(MoveOnTileCompleteComponent), 5 },
		{ typeof(MoveOnTileComponent), 6 },
		{ typeof(OnTileElementAddedListenerComponent), 7 },
		{ typeof(OnTileElementComponent), 8 },
		{ typeof(PlayerComponent), 9 },
		{ typeof(TilePositionComponent), 10 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
