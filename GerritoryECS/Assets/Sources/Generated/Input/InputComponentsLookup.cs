//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class InputComponentsLookup
{
	public const int AIInput = 0;
	public const int ChaseNearestOnTileElementVictimInput = 1;
	public const int DebugMessage = 2;
	public const int EvaluatingForMovementInput = 3;
	public const int IdleTimer = 4;
	public const int UserInput = 5;

	public const int TotalComponents = 6;

	public static readonly string[] ComponentNames =
	{
		"AIInput",
		"ChaseNearestOnTileElementVictimInput",
		"DebugMessage",
		"EvaluatingForMovementInput",
		"IdleTimer",
		"UserInput"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(AIInputComponent),
		typeof(ChaseNearestOnTileElementVictimInputComponent),
		typeof(DebugMessageComponent),
		typeof(EvaluatingForMovementInputComponent),
		typeof(IdleTimerComponent),
		typeof(UserInputComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(AIInputComponent), 0 },
		{ typeof(ChaseNearestOnTileElementVictimInputComponent), 1 },
		{ typeof(DebugMessageComponent), 2 },
		{ typeof(EvaluatingForMovementInputComponent), 3 },
		{ typeof(IdleTimerComponent), 4 },
		{ typeof(UserInputComponent), 5 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
